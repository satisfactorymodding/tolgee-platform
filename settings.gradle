pluginManagement {
    resolutionStrategy {
        eachPlugin {
            if (requested.id.id == 'io.spring.dependency-management') {
                useModule("io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion")
            }

            if (requested.id.id == 'org.springframework.boot') {
                useModule("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
            }

            if (requested.id.id == 'kotlin-allopen') {
                useModule("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
            }

            if (requested.id.id == 'kotlin-jpa') {
                useModule("org.jetbrains.kotlin.plugin.jpa:org.jetbrains.kotlin.plugin.jpa.gradle.plugin:$kotlinVersion")
            }

            if (requested.id.id == 'org.liquibase.gradle') {
                useModule('org.liquibase.gradle:org.liquibase.gradle.gradle.plugin:2.1.1')
            }
        }
    }
}

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            library('stripe', 'com.stripe', 'stripe-java').version('22.11.0')
            library('sendInBlue', 'com.sendinblue', 'sib-api-v3-sdk').version('5.3.0')
            library('jacksonModuleKotlin', 'com.fasterxml.jackson.module', 'jackson-module-kotlin').version('2.12.4')
            library('kotlin', 'org.jetbrains.kotlin', 'kotlin-gradle-plugin').version(kotlinVersion)
            library('kotlinReflect', 'org.jetbrains.kotlin', 'kotlin-reflect').version(kotlinVersion)
            library('kotlinCoroutines', 'org.jetbrains.kotlinx', 'kotlinx-coroutines-core').version('1.6.1')
            library('springDocOpenApiWebMvcCore', 'org.springdoc', 'springdoc-openapi-webmvc-core').version(springDocVersion)
            library('springDocOpenApiUi', 'org.springdoc', 'springdoc-openapi-ui').version(springDocVersion)
            library('springDocOpenApiKotlin', 'org.springdoc', 'springdoc-openapi-kotlin').version(springDocVersion)
            library('springDocOpenApiDataRest', 'org.springdoc', 'springdoc-openapi-data-rest').version(springDocVersion)
            library('springDocOpenApiHateoas', 'org.springdoc', 'springdoc-openapi-hateoas').version(springDocVersion)
            library('jjwtApi', 'io.jsonwebtoken', 'jjwt-api').version(jjwtVersion)
            library('jjwtImpl', 'io.jsonwebtoken', 'jjwt-impl').version(jjwtVersion)
            library('jjwtJackson', 'io.jsonwebtoken', 'jjwt-jackson').version(jjwtVersion)
            library('assertJCore', 'org.assertj:assertj-core:3.19.0')
            library('springmockk', 'com.ninja-squad:springmockk:3.0.1')
            library('mockito', 'org.mockito.kotlin:mockito-kotlin:3.2.0')
            library('commonsCodec', 'commons-codec:commons-codec:1.15')
            library('icu4j', 'com.ibm.icu:icu4j:69.1')
            library('jsonUnitAssert', 'net.javacrumbs.json-unit:json-unit-assertj:2.28.0')
            library('amazonS3', "software.amazon.awssdk:s3:$amazonAwsSdkVersion")
            library('amazonSTS', "software.amazon.awssdk:sts:$amazonAwsSdkVersion")
            library('amazonTranslate', "software.amazon.awssdk:translate:$amazonAwsSdkVersion")
            library('googleCloud', "com.google.cloud:libraries-bom:24.0.0")
            library('sentry', "io.sentry:sentry-spring-boot-starter:5.7.3")
            library('liquibaseCore', "org.liquibase:liquibase-core:4.9.1")
            library('liquibaseHibernate', "org.liquibase.ext:liquibase-hibernate5:4.9.1")
            library('hibernateTypes', "com.vladmihalcea:hibernate-types-55:2.14.1")
            library('redissonSpringBootStarter', "org.redisson:redisson-spring-boot-starter:3.21.0")
            library('redissonSpringData', 'org.redisson:redisson-spring-data-27:3.21.0')
            library('postHog', 'com.posthog.java:posthog:1.1.0')
        }
    }
}

include ':server-app'
project(':server-app').projectDir = new File('backend/app')

include ':data'
project(':data').projectDir = new File('backend/data')

include ':billing-app'
project(':billing-app').projectDir = new File('../billing/app')

include ':billing-test'
project(':billing-test').projectDir = new File('../billing/tests')

include ':testing'
project(':testing').projectDir = new File('backend/testing')

include ':misc'
project(':misc').projectDir = new File('backend/misc')

include ':ee-app'
project(':ee-app').projectDir = new File('ee/backend/app')

include ':ee-test'
project(':ee-test').projectDir = new File('ee/backend/tests')

include ':development'
project(':development').projectDir = new File('backend/development')

include ':api'
project(':api').projectDir = new File('backend/api')
